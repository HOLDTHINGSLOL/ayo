-- New example script written by wally
-- You can suggest changes with a pull request or something

local repo = 'https://raw.githubusercontent.com/violin-suzutsuki/LinoriaLib/main/'

local Library = loadstring(game:HttpGet(repo .. 'Library.lua'))()
local ThemeManager = loadstring(game:HttpGet(repo .. 'addons/ThemeManager.lua'))()
local SaveManager = loadstring(game:HttpGet(repo .. 'addons/SaveManager.lua'))()

local Window = Library:CreateWindow({
    -- Set Center to true if you want the menu to appear in the center
    -- Set AutoShow to true if you want the menu to appear when it is created
    -- Position and Size are also valid options here
    -- but you do not need to define them unless you are changing them :)

    Title = 'FrostyCardGui V:2',
    Center = true,
    AutoShow = true,
    TabPadding = 8
})

-- CALLBACK NOTE:
-- Passing in callback functions via the initial element parameters (i.e. Callback = function(Value)...) works
-- HOWEVER, using Toggles/Options.INDEX:OnChanged(function(Value) ... ) is the RECOMMENDED way to do this.
-- I strongly recommend decoupling UI code from logic code. i.e. Create your UI elements FIRST, and THEN setup :OnChanged functions later.

-- You do not have to set your tabs & groups up this way, just a prefrence.


local FrostyCardGui = {
      Version = 1,
      Debug = true,

    GuiConfigs = {
       AutoClickerConfigs = {
        AutoClicking = false,
       },
       AutoEquipConfigs = {
        MultiEquip = {},
        AutoEquip = false,
        ToolName = "None",
        EquipToolBar = false,
       },
       EggFarmConfigs = {
          EggFarming = false,
          Mode = "Normal",
        },
        OreFarmConfigs = {
          Pickaxe = "None",
          OreFarming = false,
          SelectedOreMode = false,
          OreSelected = "Crystal",
        },
      },
}

local Tabs = {
    -- Creates a new tab titled Main
    Main = Window:AddTab('Main'),
    Teleporters = Window:AddTab('Teleporters'),
    ['UI Settings'] = Window:AddTab('UI Settings'),
}

local LeftGroupBox = Tabs.Main:AddLeftGroupbox('Main')

local LeftGroupBoxes = {
    LeftGroupTeleporter = Tabs.Teleporters:AddLeftGroupbox('Mine'),
    LeftGroupMain2 = Tabs.Main:AddLeftGroupbox('Misc'),
}

-- Groupbox and Tabbox inherit the same functions
-- except Tabboxes you have to call the functions on a tab (Tabbox:AddTab(name))

-- We can also get our Main tab via the following code:
-- local LeftGroupBox = Window.Tabs.Main:AddLeftGroupbox('Groupbox')

-- Tabboxes are a tiny bit different, but here's a basic example:
--[[

local TabBox = Tabs.Main:AddLeftTabbox() -- Add Tabbox on left side

local Tab1 = TabBox:AddTab('Tab 1')
local Tab2 = TabBox:AddTab('Tab 2')

-- You can now call AddToggle, etc on the tabs you added to the Tabbox
]]

--//Functions\\
local _speed= 200
function tp(...)
   local plr=game.Players.LocalPlayer
   local args={...}
   if typeof(args[1])=="number"and args[2]and args[3]then
      args=Vector3.new(args[1],args[2],args[3])
   elseif typeof(args[1])=="Vector3" then
       args=args[1]    
   elseif typeof(args[1])=="CFrame" then
       args=args[1].Position
   end
   local dist=(plr.Character.HumanoidRootPart.Position-args).Magnitude
   game:GetService("TweenService"):Create(
       plr.Character.HumanoidRootPart,
       TweenInfo.new(dist/_speed,Enum.EasingStyle.Linear),
       {CFrame=CFrame.new(args)}
   ):Play()
end

local function getegg()
local currentegg = nil


for i ,v in game:GetService("Workspace"):GetDescendants() do
   if v.Name == "Egg" and v:IsA("MeshPart") and v.Parent then
    currentegg = v
end
end


return currentegg
end

local function GetOre()
local currentOre = nil
CFrameyval = nil
if game.PlaceId == 9032150459 then
CFrameyval = 1501
else
CFrameyval = 81
end



for i ,v in  workspace.Map.Ores:GetDescendants() do
   if v.Parent and v:FindFirstChild("Base") and v:FindFirstChild("Base").CFrame.Y < CFrameyval then
    currentOre = v
end
end

return currentOre
end

local function GetSelectedOre()
local currentOre = nil
CFrameyval = nil
if game.PlaceId == 9032150459 then
CFrameyval = 1501
else
CFrameyval = 81
end

for i ,v in  workspace.Map.Ores:GetDescendants() do
   if v.Name == FrostyCardGui.GuiConfigs.OreFarmConfigs.OreSelected and v.Parent and v:FindFirstChild("Base") and v:FindFirstChild("Base").CFrame.Y < CFrameyval then
    currentOre = v
end
end

return currentOre
end

local function Cprint(text, value)
    if not FrostyCardGui.Debug then return end

if value ~= nil then
   print(text, value)
else
    print(text)
end

end


local function GetPickaxe()
    local PickaxeName = nil
    
    for i,v in game.Players.LocalPlayer.Backpack:GetChildren() do
    local FindName = v.Name:match("Pickaxe")
    if v:IsA("Tool") and FindName then
    PickaxeName = v.Name
    Cprint(v.Name)
    return PickaxeName
     elseif not FindName then
      for j,k in game.Players.LocalPlayer.Character:GetChildren() do
          local FindName2 = k.Name:match("Pickaxe") -- or string.match(k.Name, "Pickaxe")
          if k:IsA("Tool") and FindName2 then
            PickaxeName = k.Name
            Cprint(k.Name)
            return PickaxeName
          end
       end
    end
 end
 
 end

 local function PickaxeHit()
    local Pickaxe = GetPickaxe()
    local args = {
        [1] = "mine"
    }
    
    game:GetService("Players").LocalPlayer.Character[Pickaxe].RemoteFunction:InvokeServer(unpack(args))
end

local SafePart = Instance.new("Part",Workspace)
SafePart.Anchored = true
SafePart.CanCollide = true
SafePart.CFrame = CFrame.new(0,10000,0)
SafePart.Size = Vector3.new(100,2,100)

----------------------------------------------------

--//Auto Clicker\\

LeftGroupBox:AddToggle('AutoClicker', {
    Text = 'Auto Clicker',
    Default = false, -- Default value (true / false)
    Tooltip = 'Toggle Auto Clicker', -- Information shown when you hover over the toggle

    Callback = function(Value)
        Cprint('[Gui] MyToggle changed to:', Value)
        FrostyCardGui.GuiConfigs.AutoClickerConfigs.AutoClicking = Value
    end
})


----------------------------------------------------

-- Groupbox:AddToggle
-- Arguments: Index, Options

LeftGroupBox:AddDropdown('Mode', {
    Values = { 'Normal', 'Rage' },
    Default = 1, -- number index of the value / string
    Multi = false, -- true / false, allows multiple choices to be selected

    Text = 'Mode',
    Tooltip = 'Change Egg Farm Mode', -- Information shown when you hover over the dropdown

    Callback = function(Value)
        FrostyCardGui.GuiConfigs.EggFarmConfigs.Mode = Value
        Cprint('[Gui] Dropdown got changed. New value:', Value)
    end
})

LeftGroupBox:AddToggle('EggFarm', {
    Text = 'Egg Farm',
    Default = false, -- Default value (true / false)
    Tooltip = 'Toggle Egg Farm', -- Information shown when you hover over the toggle

    Callback = function(Value)
        Cprint('[Gui] MyToggle changed to:', Value)
        FrostyCardGui.GuiConfigs.EggFarmConfigs.EggFarming = Value
    end
})


------------------------------------------------------------------
--[[LeftGroupBox:AddInput('OreName', {
    Default = 'None',
    Numeric = false, -- true / false, only allows numbers
    Finished = false, -- true / false, only calls callback when you press enter

    Text = 'Ore Name (put only if you want selected ore)!',
    Tooltip = 'Ore Name (put only if you want selected ore)!', -- Information shown when you hover over the textbox

    Placeholder = 'Ore Name (put only if you want selected ore)!', -- placeholder text when the box is empty
    -- MaxLength is also an option which is the max length of the text

    Callback = function(Value)
        Cprint('[Gui] Text updated. New text:', Value)
        FrostyCardGui.GuiConfigs.OreFarmConfigs.OreSelected = Value
    end
})--]]


--//Ore Farm\\

LeftGroupBox:AddDropdown('OreSelectDropdown', {
    Values = { 'Crystal', 'Iron','Gold', 'Diamond', 'Cobalt', 'Viridis', 'Oureclasium', 'Tungsten', 'Titanium', 'Mithril', 'Adamantine', 'Titanstone', 'Gemstone of Purity', 'Gemstone of Hatred', 'Hatrite', 'Hevenite', 'Moonstone', 'Hellite', 'Forbidden Crystal','Duranite','Aurium'},
    Default = 1, -- number index of the value / string
    Multi = false, -- true / false, allows multiple choices to be selected

    Text = 'Selected Ore',
    Tooltip = 'Change Ore Selected', -- Information shown when you hover over the dropdown

    Callback = function(Value)
        FrostyCardGui.GuiConfigs.OreFarmConfigs.OreSelected = Value
        Cprint('[Gui] Dropdown got changed. New value:', Value)
    end
})

LeftGroupBox:AddToggle('SelectedOre', {
    Text = 'Selected Ore',
    Default = false, -- Default value (true / false)
    Tooltip = 'Active Selected Ore (put ore name above)', -- Information shown when you hover over the toggle

    Callback = function(Value)
        Cprint('[Gui] MyToggle changed to:', Value)
        FrostyCardGui.GuiConfigs.OreFarmConfigs.SelectedOreMode = Value
    end
})

LeftGroupBox:AddToggle('MineFarm', {
    Text = 'Ore Farm',
    Default = false, -- Default value (true / false)
    Tooltip = 'Toggle Ore Farm', -- Information shown when you hover over the toggle

    Callback = function(Value)
        Cprint('[Gui] MyToggle changed to:', Value)
        FrostyCardGui.GuiConfigs.OreFarmConfigs.OreFarming = Value
        Cprint(FrostyCardGui.GuiConfigs.OreFarmConfigs.OreFarming)
    end
})

------------------------------------------------------------------
-- Fetching a toggle object for later use:
-- Toggles.MyToggle.Value

-- Toggles is a table added to getgenv() by the library
-- You index Toggles with the specified index, in this case it is 'MyToggle'
-- To get the state of the toggle you do toggle.Value

-- Calls the passed function when the toggle is updated
--Toggles.MyToggle:OnChanged(function()
    -- here we get our toggle object & then get its value
   -- print('MyToggle changed to:', Toggles.MyToggle.Value)
--end)

-- This should print to the console: "My toggle state changed! New value: false"
--Toggles.MyToggle:SetValue(false)

-- 1/15/23
-- Deprecated old way of creating buttons in favor of using a table
-- Added DoubleClick button functionality

--[[
    Groupbox:AddButton
    Arguments: {
        Text = string,
        Func = function,
        DoubleClick = boolean
        Tooltip = string,
    }

    You can call :AddButton on a button to add a SubButton!
]]



--[[local MyButton2 = MyButton:AddButton({
    Text = 'Sub button',
    Func = function()
        print('You clicked a sub button!')
    end,
    DoubleClick = true, -- You will have to click this button twice to trigger the callback
    Tooltip = 'This is the sub button (double click me!)'
})-]]

--[[
    NOTE: You can chain the button methods!
    EXAMPLE:

    LeftGroupBox:AddButton({ Text = 'Kill all', Func = Functions.KillAll, Tooltip = 'This will kill everyone in the game!' })
        :AddButton({ Text = 'Kick all', Func = Functions.KickAll, Tooltip = 'This will kick everyone in the game!' })
]]

-- Groupbox:AddLabel
-- Arguments: Text, DoesWrap
-- Groupbox:AddDivider
-- Arguments: None
LeftGroupBox:AddDivider()

--//Auto Equip\\

LeftGroupBoxes.LeftGroupMain2:AddInput('ToolName', {
    Default = 'None',
    Numeric = false, -- true / false, only allows numbers
    Finished = false, -- true / false, only calls callback when you press enter

    Text = 'Tool Name',
    Tooltip = 'Tool Name For The Auto Equip', -- Information shown when you hover over the textbox

    Placeholder = 'Tool Name', -- placeholder text when the box is empty
    -- MaxLength is also an option which is the max length of the text

    Callback = function(Value)
        Cprint('[Gui] Text updated. New text:', Value)
        FrostyCardGui.GuiConfigs.AutoEquipConfigs.ToolName = Value
    end
})

LeftGroupBoxes.LeftGroupMain2:AddToggle('AutoEquip', {
    Text = 'Auto Equip',
    Default = false, -- Default value (true / false)
    Tooltip = 'Toggle Auto Equip', -- Information shown when you hover over the toggle

    Callback = function(Value)
        Cprint('[Gui] MyToggle changed to:', Value)
        FrostyCardGui.GuiConfigs.AutoEquipConfigs.AutoEquip = Value
    end
})

LeftGroupBoxes.LeftGroupMain2:AddToggle('AutoEquipToolBar', {
    Text = 'Auto Equip ToolBar',
    Default = false, -- Default value (true / false)
    Tooltip = 'Toggle Auto Equip ToolBar', -- Information shown when you hover over the toggle

    Callback = function(Value)
        Cprint('[Gui] MyToggle changed to:', Value)
        FrostyCardGui.GuiConfigs.AutoEquipConfigs.EquipToolBar = Value
    end
})

--//Misc\\
local MyButton = LeftGroupBoxes.LeftGroupMain2:AddButton({
    Text = 'Equip ToolBar',
    Func = function()
   Cprint('[Gui] You clicked a button!')
pcall(function()
 for i,v in game.Players.LocalPlayer.Backpack:GetChildren() do
   if v:IsA("Tool") then
     v.Parent = game.Players.LocalPlayer.Character

end
end
end)
    end,
    DoubleClick = false,
    Tooltip = 'Equip All ToolBar Itens'
})

--//Teleporters\\

local MyButton = LeftGroupBoxes.LeftGroupTeleporter:AddButton({
    Text = 'Beneath',
    Func = function()
   Cprint('[Gui] You clicked a button!')
pcall(function()
    firetouchinterest(workspace.Map.BeneathTeleporter.pad, game.Players.LocalPlayer.Character.HumanoidRootPart, 0)
    firetouchinterest(workspace.Map.BeneathTeleporter.pad, game.Players.LocalPlayer.Character.HumanoidRootPart, 1)
end)
    end,
    DoubleClick = false,
    Tooltip = 'Equip All ToolBar Itens'
})

--[[
    Groupbox:AddSlider
    Arguments: Idx, SliderOptions

    SliderOptions: {
        Text = string,
        Default = number,
        Min = number,
        Max = number,
        Suffix = string,
        Rounding = number,
        Compact = boolean,
        HideMax = boolean,
    }

    Text, Default, Min, Max, Rounding must be specified.
    Suffix is optional.
    Rounding is the number of decimal places for precision.

    Compact will hide the title label of the Slider

    HideMax will only display the value instead of the value & max value of the slider
    Compact will do the same thing
]]

--//Loop Functions\\

--//Egg Farm\\
--print(getegg().Name)
--tp(getegg().CFrame)


--getgenv().eggFarm = true
task.spawn(function()
while true do task.wait()
if FrostyCardGui.GuiConfigs.EggFarmConfigs.EggFarming then

task.spawn(function()
if FrostyCardGui.GuiConfigs.EggFarmConfigs.Mode == "Normal" then
pcall(function()
local egglol = getegg()
if egglol then
    firetouchinterest(egglol, game.Players.LocalPlayer.Character.HumanoidRootPart, 0)
    firetouchinterest(egglol, game.Players.LocalPlayer.Character.HumanoidRootPart, 1)
end
end)
end
end)

task.spawn(function()
if FrostyCardGui.GuiConfigs.EggFarmConfigs.Mode == "Rage" then
    pcall(function()
    for i,v in workspace:GetChildren() do
       if v.Name == "Egg" and v:IsA("MeshPart") and v.Parent then
        firetouchinterest(v, game.Players.LocalPlayer.Character.HumanoidRootPart, 0)
        firetouchinterest(v, game.Players.LocalPlayer.Character.HumanoidRootPart, 1)
       end
    end
    end)
end
end)

end
end
end)

------------------------------------------------------------------


--//Ore Farm\\

task.spawn(function()
while true do task.wait()
if FrostyCardGui.GuiConfigs.OreFarmConfigs.OreFarming then
pcall(function()

if not FrostyCardGui.GuiConfigs.OreFarmConfigs.SelectedOreMode then
local Ore = GetOre()
if Ore then
    task.spawn(function()
    PickaxeHit()
    end)
    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = Ore.Base.CFrame * CFrame.new(0,-3.6,0)
    else
    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = SafePart.CFrame * CFrame.new(0,4,0)
end
end

if FrostyCardGui.GuiConfigs.OreFarmConfigs.SelectedOreMode then
local Ore = GetSelectedOre()
if Ore then
    task.spawn(function()
        PickaxeHit()
    end)
    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = Ore.Base.CFrame * CFrame.new(0,-3.6,0)
    else
    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = SafePart.CFrame * CFrame.new(0,4,0)
end
end

end)
end
end
end)

------------------------------------------------------------------



--//Auto Clicker\\


task.spawn(function()
    while true do task.wait()
    if FrostyCardGui.GuiConfigs.AutoClickerConfigs.AutoClicking then
    pcall(function()
    game:GetService("VirtualUser"):ClickButton1(Vector2.new(125,125))
end)
end
end
end)

------------------------------------------------------------------
--//Auto Equip\\

task.spawn(function()
    while true do task.wait()
    if FrostyCardGui.GuiConfigs.AutoEquipConfigs.AutoEquip then
    pcall(function()
        local Plr = game.Players.LocalPlayer
        if Plr.Backpack:FindFirstChild(FrostyCardGui.GuiConfigs.AutoEquipConfigs.ToolName) and Plr.Character:FindFirstChild(FrostyCardGui.GuiConfigs.AutoEquipConfigs.ToolName) == nil then
             local tool = Plr.Backpack:FindFirstChild(FrostyCardGui.GuiConfigs.AutoEquipConfigs.ToolName)
             Plr.Character.Humanoid:EquipTool(tool)
        end
end)
end

    if FrostyCardGui.GuiConfigs.AutoEquipConfigs.EquipToolBar then
    pcall(function()
     for i,v in game.Players.LocalPlayer.Backpack:GetChildren() do
      if v:IsA("Tool") then
       v.Parent = game.Players.LocalPlayer.Character
end
end
end)
end

end
end)

------------------------------------------------------------------

------------------------------------------------------------------








-- Long text label to demonstrate UI scrolling behaviour.
local LeftGroupBox2 = Tabs.Main:AddLeftGroupbox('Groupbox #2');
LeftGroupBox2:AddLabel('Oh no...\nThis label spans multiple lines!\n\nWe\'re gonna run out of UI space...\nJust kidding! Scroll down!\n\n\nHello from below!', true)

local TabBox = Tabs.Main:AddRightTabbox() -- Add Tabbox on right side

-- Anything we can do in a Groupbox, we can do in a Tabbox tab (AddToggle, AddSlider, AddLabel, etc etc...)
local Tab1 = TabBox:AddTab('Tab 1')
Tab1:AddToggle('Tab1Toggle', { Text = 'Tab1 Toggle' });

local Tab2 = TabBox:AddTab('Tab 2')
Tab2:AddToggle('Tab2Toggle', { Text = 'Tab2 Toggle' });

-- Dependency boxes let us control the visibility of UI elements depending on another UI elements state.
-- e.g. we have a 'Feature Enabled' toggle, and we only want to show that features sliders, dropdowns etc when it's enabled!
-- Dependency box example:
local RightGroupbox = Tabs.Main:AddRightGroupbox('Groupbox #3');
RightGroupbox:AddToggle('ControlToggle', { Text = 'Toggle me :)' });

local Depbox = RightGroupbox:AddDependencyBox();
Depbox:AddToggle('DepboxToggle', { Text = 'Toggle' });

-- We can also nest dependency boxes!
-- When we do this, our SupDepbox automatically relies on the visiblity of the Depbox - on top of whatever additional dependencies we set
local SubDepbox = Depbox:AddDependencyBox();
SubDepbox:AddSlider('DepboxSlider', { Text = 'Slider', Default = 50, Min = 0, Max = 100, Rounding = 0 });

Depbox:SetupDependencies({
    { Toggles.ControlToggle, true } -- We can also pass `false` if we only want our features to show when the toggle is off!
});

SubDepbox:SetupDependencies({
    { Toggles.DepboxToggle, true }
});

-- Library functions
-- Sets the watermark visibility
Library:SetWatermarkVisibility(false)

-- Sets the watermark text
Library:SetWatermark('Enjoy The Script!')

Library.KeybindFrame.Visible = false; -- todo: add a function for this

Library:OnUnload(function()
    print('Unloaded!')
    Library.Unloaded = true
end)

-- UI Settings
local MenuGroup = Tabs['UI Settings']:AddLeftGroupbox('Menu')

-- I set NoUI so it does not show up in the keybinds menu
MenuGroup:AddButton('Unload', function() Library:Unload() end)
MenuGroup:AddLabel('Menu bind'):AddKeyPicker('MenuKeybind', { Default = 'End', NoUI = true, Text = 'Menu keybind' })

Library.ToggleKeybind = Options.MenuKeybind -- Allows you to have a custom keybind for the menu

-- Addons:
-- SaveManager (Allows you to have a configuration system)
-- ThemeManager (Allows you to have a menu theme system)

-- Hand the library over to our managers
ThemeManager:SetLibrary(Library)
SaveManager:SetLibrary(Library)

-- Ignore keys that are used by ThemeManager.
-- (we dont want configs to save themes, do we?)
SaveManager:IgnoreThemeSettings()

-- Adds our MenuKeybind to the ignore list
-- (do you want each config to have a different menu key? probably not.)
SaveManager:SetIgnoreIndexes({ 'MenuKeybind' })

-- use case for doing it this way:
-- a script hub could have themes in a global folder
-- and game configs in a separate folder per game
ThemeManager:SetFolder('FrostyCardGui')
SaveManager:SetFolder('FrostyCardGui/BalancedCraftWars')

-- Builds our config menu on the right side of our tab
SaveManager:BuildConfigSection(Tabs['UI Settings'])

-- Builds our theme menu (with plenty of built in themes) on the left side
-- NOTE: you can also call ThemeManager:ApplyToGroupbox to add it to a specific groupbox
ThemeManager:ApplyToTab(Tabs['UI Settings'])

-- You can use the SaveManager:LoadAutoloadConfig() to load a config
-- which has been marked to be one that auto loads!
SaveManager:LoadAutoloadConfig()








